Midterm Wed. Mar. 1
Review Fri. Feb. 24

Device Management:

devices have a wide range of transfer speeds, communication protocols, and they work independently of the cpu (for the most part)

The OS needs to be able to deal with multiple parallel requests for attention. 

The key to communication between devices and the CPU is the system bus.

A bus is a set of 32 or 64 parallel wires.

A special device called the bus controller is responsible for turning on and off access to the bus at any given cycle. Only one device can write on the bus at any given time. 

Device controllers handle the low level details of requests from the CPU.

DMA - direct memory access.

The CPU frequenctly minimizes contact with controllers directly and instead relies on an I/O control unit.

One important technique in I/O communication is called Direct Memory Access (DMA). A device controller can access RAM directly and transfer data without the intervention of the CPU.

Unix has an excellent abstraction layer for dealing with devices. It considers all devices as files. The techniques for opening, closing, reading, and writing are the same from an abstract viewpoint. It's left to the corresponding device controller and device drivers to fit with these abstractions.

Between the OS and the device controllers is a program called the device driver, which is responsible for translating the abstractions of the OS into something understood by the controller (which is mostly hardware).

Different transfer protocols:
	character devices (keyboards & mice) - transfer 1 character at a time.
	block devices - transfer data in blocks (on the OS side, there's a read command 
		that's appropriate only for block transfer.)
	sockets: (network devices or  applications communicating with the network protocol)

	There's many ways to handle priority for the different data transfer types.
